# Query - Mutation - Subscription

type Query {
  # Account
  me: Account!
  account(id: ID!): Account!
  accounts: [Account!]!

  # Scorecard
  scoreCard(id: ID): Scorecard!
  scoreCards: [Scorecard!]!
  myScorecards: [Scorecard!]!
  getProfileScorecards(profileId: ID!): [Scorecard!]!

  # Stroke
  stroke(id: ID!): Stroke!
  strokes: [Stroke!]!

  # Profile
  myProfile: Profile!
  profiles: [Profile!]!
  profileById(profileId: ID!): Profile!

  # Course
  course(courseId: ID!): Course!
  courses: [Course!]!
}

type Mutation {
  # Auth/Account
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createAccount(email: String!, password: String!, role: Role!): Account!
  deleteAccount(id: ID!): Account!

  # Scorecard
  newScorecard(golfers: [GolferInput]!, course: CourseInput!): Scorecard!

  # Stroke
  createStroke(golferId: ID, profileId: ID, holeId: ID!, strokes: Int!): Stroke!
}

# Types

type AuthPayload {
  token: String!
  account: Account!
}

type Account {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  profile: Profile
  role: Role!
}

type Profile {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  fullName: String!
  account: Account!
  scoreCards: [Scorecard!]!
}

type Course {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  scoreCard: Scorecard
  courseName: String!
  courseAddress: String!
  coursePhone: String!
  long: Float!
  lat: Float!
  numberOfHoles: Int!
  holes: [Hole!]!
}

type Hole {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  course: Course
  holeNum: Int!
  handicap: Int!
  par: Int!
  distanceToFlag: Float!
  blueTee: Int
  whiteTee: Int
  redTee: Int
}

type Scorecard {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  profile: Profile!
  golfers: [String!]!
  course: Course!
  isActive: Boolean
}

type Stroke {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  hole: Hole!
  golfer: String!
  strokes: Int!
}

type Golfer {
  id: ID!
  createdAt: String
  updatedAt: String
  name: String!
  scoreCard: Scorecard
}

input GolferInput {
  name: String!
  scoreCard: ID
}

input CourseInput {
  courseId: ID
}

enum Role {
  USER
  ADMIN
}

scalar DateTime
