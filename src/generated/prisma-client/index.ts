// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  golfer: (where?: GolferWhereInput) => Promise<boolean>;
  hole: (where?: HoleWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  scorecard: (where?: ScorecardWhereInput) => Promise<boolean>;
  stroke: (where?: StrokeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  golfer: (where: GolferWhereUniqueInput) => GolferNullablePromise;
  golfers: (args?: {
    where?: GolferWhereInput;
    orderBy?: GolferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Golfer>;
  golfersConnection: (args?: {
    where?: GolferWhereInput;
    orderBy?: GolferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GolferConnectionPromise;
  hole: (where: HoleWhereUniqueInput) => HoleNullablePromise;
  holes: (args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hole>;
  holesConnection: (args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HoleConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  scorecard: (where: ScorecardWhereUniqueInput) => ScorecardNullablePromise;
  scorecards: (args?: {
    where?: ScorecardWhereInput;
    orderBy?: ScorecardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Scorecard>;
  scorecardsConnection: (args?: {
    where?: ScorecardWhereInput;
    orderBy?: ScorecardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScorecardConnectionPromise;
  stroke: (where: StrokeWhereUniqueInput) => StrokeNullablePromise;
  strokes: (args?: {
    where?: StrokeWhereInput;
    orderBy?: StrokeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Stroke>;
  strokesConnection: (args?: {
    where?: StrokeWhereInput;
    orderBy?: StrokeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StrokeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createGolfer: (data: GolferCreateInput) => GolferPromise;
  updateGolfer: (args: {
    data: GolferUpdateInput;
    where: GolferWhereUniqueInput;
  }) => GolferPromise;
  updateManyGolfers: (args: {
    data: GolferUpdateManyMutationInput;
    where?: GolferWhereInput;
  }) => BatchPayloadPromise;
  upsertGolfer: (args: {
    where: GolferWhereUniqueInput;
    create: GolferCreateInput;
    update: GolferUpdateInput;
  }) => GolferPromise;
  deleteGolfer: (where: GolferWhereUniqueInput) => GolferPromise;
  deleteManyGolfers: (where?: GolferWhereInput) => BatchPayloadPromise;
  createHole: (data: HoleCreateInput) => HolePromise;
  updateHole: (args: {
    data: HoleUpdateInput;
    where: HoleWhereUniqueInput;
  }) => HolePromise;
  updateManyHoles: (args: {
    data: HoleUpdateManyMutationInput;
    where?: HoleWhereInput;
  }) => BatchPayloadPromise;
  upsertHole: (args: {
    where: HoleWhereUniqueInput;
    create: HoleCreateInput;
    update: HoleUpdateInput;
  }) => HolePromise;
  deleteHole: (where: HoleWhereUniqueInput) => HolePromise;
  deleteManyHoles: (where?: HoleWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createScorecard: (data: ScorecardCreateInput) => ScorecardPromise;
  updateScorecard: (args: {
    data: ScorecardUpdateInput;
    where: ScorecardWhereUniqueInput;
  }) => ScorecardPromise;
  updateManyScorecards: (args: {
    data: ScorecardUpdateManyMutationInput;
    where?: ScorecardWhereInput;
  }) => BatchPayloadPromise;
  upsertScorecard: (args: {
    where: ScorecardWhereUniqueInput;
    create: ScorecardCreateInput;
    update: ScorecardUpdateInput;
  }) => ScorecardPromise;
  deleteScorecard: (where: ScorecardWhereUniqueInput) => ScorecardPromise;
  deleteManyScorecards: (where?: ScorecardWhereInput) => BatchPayloadPromise;
  createStroke: (data: StrokeCreateInput) => StrokePromise;
  updateStroke: (args: {
    data: StrokeUpdateInput;
    where: StrokeWhereUniqueInput;
  }) => StrokePromise;
  updateManyStrokes: (args: {
    data: StrokeUpdateManyMutationInput;
    where?: StrokeWhereInput;
  }) => BatchPayloadPromise;
  upsertStroke: (args: {
    where: StrokeWhereUniqueInput;
    create: StrokeCreateInput;
    update: StrokeUpdateInput;
  }) => StrokePromise;
  deleteStroke: (where: StrokeWhereUniqueInput) => StrokePromise;
  deleteManyStrokes: (where?: StrokeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  golfer: (
    where?: GolferSubscriptionWhereInput
  ) => GolferSubscriptionPayloadSubscription;
  hole: (
    where?: HoleSubscriptionWhereInput
  ) => HoleSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  scorecard: (
    where?: ScorecardSubscriptionWhereInput
  ) => ScorecardSubscriptionPayloadSubscription;
  stroke: (
    where?: StrokeSubscriptionWhereInput
  ) => StrokeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ScorecardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isActive_ASC"
  | "isActive_DESC";

export type Role = "USER" | "ADMIN";

export type GolferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type HoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "holeNum_ASC"
  | "holeNum_DESC"
  | "handicap_ASC"
  | "handicap_DESC"
  | "par_ASC"
  | "par_DESC"
  | "distanceToFlag_ASC"
  | "distanceToFlag_DESC"
  | "blueTee_ASC"
  | "blueTee_DESC"
  | "whiteTee_ASC"
  | "whiteTee_DESC"
  | "redTee_ASC"
  | "redTee_DESC";

export type StrokeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "golferId_ASC"
  | "golferId_DESC"
  | "profileId_ASC"
  | "profileId_DESC"
  | "strokes_ASC"
  | "strokes_DESC";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "courseName_ASC"
  | "courseName_DESC"
  | "courseAddress_ASC"
  | "courseAddress_DESC"
  | "coursePhone_ASC"
  | "coursePhone_DESC"
  | "long_ASC"
  | "long_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "numberOfHoles_ASC"
  | "numberOfHoles_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "fullName_ASC"
  | "fullName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GolferScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<GolferScalarWhereInput[] | GolferScalarWhereInput>;
  OR?: Maybe<GolferScalarWhereInput[] | GolferScalarWhereInput>;
  NOT?: Maybe<GolferScalarWhereInput[] | GolferScalarWhereInput>;
}

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface HoleUpdateWithWhereUniqueWithoutCourseInput {
  where: HoleWhereUniqueInput;
  data: HoleUpdateWithoutCourseDataInput;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  scoreCard?: Maybe<ScorecardWhereInput>;
  courseName?: Maybe<String>;
  courseName_not?: Maybe<String>;
  courseName_in?: Maybe<String[] | String>;
  courseName_not_in?: Maybe<String[] | String>;
  courseName_lt?: Maybe<String>;
  courseName_lte?: Maybe<String>;
  courseName_gt?: Maybe<String>;
  courseName_gte?: Maybe<String>;
  courseName_contains?: Maybe<String>;
  courseName_not_contains?: Maybe<String>;
  courseName_starts_with?: Maybe<String>;
  courseName_not_starts_with?: Maybe<String>;
  courseName_ends_with?: Maybe<String>;
  courseName_not_ends_with?: Maybe<String>;
  courseAddress?: Maybe<String>;
  courseAddress_not?: Maybe<String>;
  courseAddress_in?: Maybe<String[] | String>;
  courseAddress_not_in?: Maybe<String[] | String>;
  courseAddress_lt?: Maybe<String>;
  courseAddress_lte?: Maybe<String>;
  courseAddress_gt?: Maybe<String>;
  courseAddress_gte?: Maybe<String>;
  courseAddress_contains?: Maybe<String>;
  courseAddress_not_contains?: Maybe<String>;
  courseAddress_starts_with?: Maybe<String>;
  courseAddress_not_starts_with?: Maybe<String>;
  courseAddress_ends_with?: Maybe<String>;
  courseAddress_not_ends_with?: Maybe<String>;
  coursePhone?: Maybe<String>;
  coursePhone_not?: Maybe<String>;
  coursePhone_in?: Maybe<String[] | String>;
  coursePhone_not_in?: Maybe<String[] | String>;
  coursePhone_lt?: Maybe<String>;
  coursePhone_lte?: Maybe<String>;
  coursePhone_gt?: Maybe<String>;
  coursePhone_gte?: Maybe<String>;
  coursePhone_contains?: Maybe<String>;
  coursePhone_not_contains?: Maybe<String>;
  coursePhone_starts_with?: Maybe<String>;
  coursePhone_not_starts_with?: Maybe<String>;
  coursePhone_ends_with?: Maybe<String>;
  coursePhone_not_ends_with?: Maybe<String>;
  long?: Maybe<Float>;
  long_not?: Maybe<Float>;
  long_in?: Maybe<Float[] | Float>;
  long_not_in?: Maybe<Float[] | Float>;
  long_lt?: Maybe<Float>;
  long_lte?: Maybe<Float>;
  long_gt?: Maybe<Float>;
  long_gte?: Maybe<Float>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  numberOfHoles?: Maybe<Int>;
  numberOfHoles_not?: Maybe<Int>;
  numberOfHoles_in?: Maybe<Int[] | Int>;
  numberOfHoles_not_in?: Maybe<Int[] | Int>;
  numberOfHoles_lt?: Maybe<Int>;
  numberOfHoles_lte?: Maybe<Int>;
  numberOfHoles_gt?: Maybe<Int>;
  numberOfHoles_gte?: Maybe<Int>;
  holes_every?: Maybe<HoleWhereInput>;
  holes_some?: Maybe<HoleWhereInput>;
  holes_none?: Maybe<HoleWhereInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface CourseCreateOneWithoutHolesInput {
  create?: Maybe<CourseCreateWithoutHolesInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  scoreCard: ScorecardCreateOneWithoutCourseInput;
  courseName: String;
  courseAddress: String;
  coursePhone: String;
  long: Float;
  lat: Float;
  numberOfHoles: Int;
  holes?: Maybe<HoleCreateManyWithoutCourseInput>;
}

export interface CourseCreateWithoutHolesInput {
  id?: Maybe<ID_Input>;
  scoreCard: ScorecardCreateOneWithoutCourseInput;
  courseName: String;
  courseAddress: String;
  coursePhone: String;
  long: Float;
  lat: Float;
  numberOfHoles: Int;
}

export interface HoleUpdateWithoutCourseDataInput {
  holeNum?: Maybe<Int>;
  handicap?: Maybe<Int>;
  par?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface ScorecardCreateOneWithoutCourseInput {
  create?: Maybe<ScorecardCreateWithoutCourseInput>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface StrokeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StrokeWhereInput>;
  AND?: Maybe<StrokeSubscriptionWhereInput[] | StrokeSubscriptionWhereInput>;
  OR?: Maybe<StrokeSubscriptionWhereInput[] | StrokeSubscriptionWhereInput>;
  NOT?: Maybe<StrokeSubscriptionWhereInput[] | StrokeSubscriptionWhereInput>;
}

export interface ScorecardCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  profile: ProfileCreateOneWithoutScoreCardsInput;
  golfers?: Maybe<GolferCreateManyWithoutScoreCardInput>;
  strokes?: Maybe<StrokeCreateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface ScorecardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScorecardWhereInput>;
  AND?: Maybe<
    ScorecardSubscriptionWhereInput[] | ScorecardSubscriptionWhereInput
  >;
  OR?: Maybe<
    ScorecardSubscriptionWhereInput[] | ScorecardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ScorecardSubscriptionWhereInput[] | ScorecardSubscriptionWhereInput
  >;
}

export interface ProfileCreateOneWithoutScoreCardsInput {
  create?: Maybe<ProfileCreateWithoutScoreCardsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface ProfileCreateWithoutScoreCardsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  fullName: String;
  account: AccountCreateOneWithoutProfileInput;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  account?: Maybe<AccountWhereInput>;
  scoreCards_every?: Maybe<ScorecardWhereInput>;
  scoreCards_some?: Maybe<ScorecardWhereInput>;
  scoreCards_none?: Maybe<ScorecardWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface AccountCreateOneWithoutProfileInput {
  create?: Maybe<AccountCreateWithoutProfileInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface ScorecardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileWhereInput>;
  golfers_every?: Maybe<GolferWhereInput>;
  golfers_some?: Maybe<GolferWhereInput>;
  golfers_none?: Maybe<GolferWhereInput>;
  course?: Maybe<CourseWhereInput>;
  strokes_every?: Maybe<StrokeWhereInput>;
  strokes_some?: Maybe<StrokeWhereInput>;
  strokes_none?: Maybe<StrokeWhereInput>;
  isActive?: Maybe<Boolean>;
  isActive_not?: Maybe<Boolean>;
  AND?: Maybe<ScorecardWhereInput[] | ScorecardWhereInput>;
  OR?: Maybe<ScorecardWhereInput[] | ScorecardWhereInput>;
  NOT?: Maybe<ScorecardWhereInput[] | ScorecardWhereInput>;
}

export interface AccountCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: Role;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface AccountUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneRequiredWithoutAccountInput>;
  role?: Maybe<Role>;
}

export interface ScorecardUpsertWithoutStrokesInput {
  update: ScorecardUpdateWithoutStrokesDataInput;
  create: ScorecardCreateWithoutStrokesInput;
}

export interface ProfileUpdateOneRequiredWithoutAccountInput {
  create?: Maybe<ProfileCreateWithoutAccountInput>;
  update?: Maybe<ProfileUpdateWithoutAccountDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutAccountInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ScorecardUpdateOneWithoutStrokesInput {
  create?: Maybe<ScorecardCreateWithoutStrokesInput>;
  update?: Maybe<ScorecardUpdateWithoutStrokesDataInput>;
  upsert?: Maybe<ScorecardUpsertWithoutStrokesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface ProfileUpdateWithoutAccountDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  scoreCards?: Maybe<ScorecardUpdateManyWithoutProfileInput>;
}

export interface StrokeUpdateInput {
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  hole?: Maybe<HoleUpdateOneRequiredInput>;
  scoreCard?: Maybe<ScorecardUpdateOneWithoutStrokesInput>;
  strokes?: Maybe<Int>;
}

export interface ScorecardUpdateManyWithoutProfileInput {
  create?: Maybe<
    ScorecardCreateWithoutProfileInput[] | ScorecardCreateWithoutProfileInput
  >;
  delete?: Maybe<ScorecardWhereUniqueInput[] | ScorecardWhereUniqueInput>;
  connect?: Maybe<ScorecardWhereUniqueInput[] | ScorecardWhereUniqueInput>;
  set?: Maybe<ScorecardWhereUniqueInput[] | ScorecardWhereUniqueInput>;
  disconnect?: Maybe<ScorecardWhereUniqueInput[] | ScorecardWhereUniqueInput>;
  update?: Maybe<
    | ScorecardUpdateWithWhereUniqueWithoutProfileInput[]
    | ScorecardUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ScorecardUpsertWithWhereUniqueWithoutProfileInput[]
    | ScorecardUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<ScorecardScalarWhereInput[] | ScorecardScalarWhereInput>;
  updateMany?: Maybe<
    | ScorecardUpdateManyWithWhereNestedInput[]
    | ScorecardUpdateManyWithWhereNestedInput
  >;
}

export interface ScorecardCreateOneWithoutStrokesInput {
  create?: Maybe<ScorecardCreateWithoutStrokesInput>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface ScorecardUpdateWithWhereUniqueWithoutProfileInput {
  where: ScorecardWhereUniqueInput;
  data: ScorecardUpdateWithoutProfileDataInput;
}

export type GolferWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ScorecardUpdateWithoutProfileDataInput {
  golfers?: Maybe<GolferUpdateManyWithoutScoreCardInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutScoreCardInput>;
  strokes?: Maybe<StrokeUpdateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface ScorecardUpdateInput {
  profile?: Maybe<ProfileUpdateOneRequiredWithoutScoreCardsInput>;
  golfers?: Maybe<GolferUpdateManyWithoutScoreCardInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutScoreCardInput>;
  strokes?: Maybe<StrokeUpdateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface GolferUpdateManyWithoutScoreCardInput {
  create?: Maybe<
    GolferCreateWithoutScoreCardInput[] | GolferCreateWithoutScoreCardInput
  >;
  delete?: Maybe<GolferWhereUniqueInput[] | GolferWhereUniqueInput>;
  connect?: Maybe<GolferWhereUniqueInput[] | GolferWhereUniqueInput>;
  set?: Maybe<GolferWhereUniqueInput[] | GolferWhereUniqueInput>;
  disconnect?: Maybe<GolferWhereUniqueInput[] | GolferWhereUniqueInput>;
  update?: Maybe<
    | GolferUpdateWithWhereUniqueWithoutScoreCardInput[]
    | GolferUpdateWithWhereUniqueWithoutScoreCardInput
  >;
  upsert?: Maybe<
    | GolferUpsertWithWhereUniqueWithoutScoreCardInput[]
    | GolferUpsertWithWhereUniqueWithoutScoreCardInput
  >;
  deleteMany?: Maybe<GolferScalarWhereInput[] | GolferScalarWhereInput>;
  updateMany?: Maybe<
    | GolferUpdateManyWithWhereNestedInput[]
    | GolferUpdateManyWithWhereNestedInput
  >;
}

export type HoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GolferUpdateWithWhereUniqueWithoutScoreCardInput {
  where: GolferWhereUniqueInput;
  data: GolferUpdateWithoutScoreCardDataInput;
}

export interface ProfileUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  account?: Maybe<AccountUpdateOneRequiredWithoutProfileInput>;
  scoreCards?: Maybe<ScorecardUpdateManyWithoutProfileInput>;
}

export interface GolferUpdateWithoutScoreCardDataInput {
  name?: Maybe<String>;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GolferUpsertWithWhereUniqueWithoutScoreCardInput {
  where: GolferWhereUniqueInput;
  update: GolferUpdateWithoutScoreCardDataInput;
  create: GolferCreateWithoutScoreCardInput;
}

export interface HoleUpdateInput {
  course?: Maybe<CourseUpdateOneRequiredWithoutHolesInput>;
  holeNum?: Maybe<Int>;
  handicap?: Maybe<Int>;
  par?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface CourseUpdateManyMutationInput {
  courseName?: Maybe<String>;
  courseAddress?: Maybe<String>;
  coursePhone?: Maybe<String>;
  long?: Maybe<Float>;
  lat?: Maybe<Float>;
  numberOfHoles?: Maybe<Int>;
}

export interface ScorecardUpsertWithoutGolfersInput {
  update: ScorecardUpdateWithoutGolfersDataInput;
  create: ScorecardCreateWithoutGolfersInput;
}

export interface GolferUpdateManyWithWhereNestedInput {
  where: GolferScalarWhereInput;
  data: GolferUpdateManyDataInput;
}

export interface ScorecardUpdateWithoutGolfersDataInput {
  profile?: Maybe<ProfileUpdateOneRequiredWithoutScoreCardsInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutScoreCardInput>;
  strokes?: Maybe<StrokeUpdateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface GolferUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface GolferUpdateInput {
  name?: Maybe<String>;
  scoreCard?: Maybe<ScorecardUpdateOneWithoutGolfersInput>;
}

export interface CourseUpdateOneRequiredWithoutScoreCardInput {
  create?: Maybe<CourseCreateWithoutScoreCardInput>;
  update?: Maybe<CourseUpdateWithoutScoreCardDataInput>;
  upsert?: Maybe<CourseUpsertWithoutScoreCardInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface ScorecardCreateWithoutGolfersInput {
  id?: Maybe<ID_Input>;
  profile: ProfileCreateOneWithoutScoreCardsInput;
  course: CourseCreateOneWithoutScoreCardInput;
  strokes?: Maybe<StrokeCreateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface CourseUpdateWithoutScoreCardDataInput {
  courseName?: Maybe<String>;
  courseAddress?: Maybe<String>;
  coursePhone?: Maybe<String>;
  long?: Maybe<Float>;
  lat?: Maybe<Float>;
  numberOfHoles?: Maybe<Int>;
  holes?: Maybe<HoleUpdateManyWithoutCourseInput>;
}

export interface GolferCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  scoreCard?: Maybe<ScorecardCreateOneWithoutGolfersInput>;
}

export interface HoleUpdateManyWithoutCourseInput {
  create?: Maybe<HoleCreateWithoutCourseInput[] | HoleCreateWithoutCourseInput>;
  delete?: Maybe<HoleWhereUniqueInput[] | HoleWhereUniqueInput>;
  connect?: Maybe<HoleWhereUniqueInput[] | HoleWhereUniqueInput>;
  set?: Maybe<HoleWhereUniqueInput[] | HoleWhereUniqueInput>;
  disconnect?: Maybe<HoleWhereUniqueInput[] | HoleWhereUniqueInput>;
  update?: Maybe<
    | HoleUpdateWithWhereUniqueWithoutCourseInput[]
    | HoleUpdateWithWhereUniqueWithoutCourseInput
  >;
  upsert?: Maybe<
    | HoleUpsertWithWhereUniqueWithoutCourseInput[]
    | HoleUpsertWithWhereUniqueWithoutCourseInput
  >;
  deleteMany?: Maybe<HoleScalarWhereInput[] | HoleScalarWhereInput>;
  updateMany?: Maybe<
    HoleUpdateManyWithWhereNestedInput[] | HoleUpdateManyWithWhereNestedInput
  >;
}

export interface AccountCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  profile: ProfileCreateOneWithoutAccountInput;
  role: Role;
}

export interface CourseUpdateInput {
  scoreCard?: Maybe<ScorecardUpdateOneRequiredWithoutCourseInput>;
  courseName?: Maybe<String>;
  courseAddress?: Maybe<String>;
  coursePhone?: Maybe<String>;
  long?: Maybe<Float>;
  lat?: Maybe<Float>;
  numberOfHoles?: Maybe<Int>;
  holes?: Maybe<HoleUpdateManyWithoutCourseInput>;
}

export interface ProfileCreateWithoutAccountInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  fullName: String;
  scoreCards?: Maybe<ScorecardCreateManyWithoutProfileInput>;
}

export interface HoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  course?: Maybe<CourseWhereInput>;
  holeNum?: Maybe<Int>;
  holeNum_not?: Maybe<Int>;
  holeNum_in?: Maybe<Int[] | Int>;
  holeNum_not_in?: Maybe<Int[] | Int>;
  holeNum_lt?: Maybe<Int>;
  holeNum_lte?: Maybe<Int>;
  holeNum_gt?: Maybe<Int>;
  holeNum_gte?: Maybe<Int>;
  handicap?: Maybe<Int>;
  handicap_not?: Maybe<Int>;
  handicap_in?: Maybe<Int[] | Int>;
  handicap_not_in?: Maybe<Int[] | Int>;
  handicap_lt?: Maybe<Int>;
  handicap_lte?: Maybe<Int>;
  handicap_gt?: Maybe<Int>;
  handicap_gte?: Maybe<Int>;
  par?: Maybe<Int>;
  par_not?: Maybe<Int>;
  par_in?: Maybe<Int[] | Int>;
  par_not_in?: Maybe<Int[] | Int>;
  par_lt?: Maybe<Int>;
  par_lte?: Maybe<Int>;
  par_gt?: Maybe<Int>;
  par_gte?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  distanceToFlag_not?: Maybe<Float>;
  distanceToFlag_in?: Maybe<Float[] | Float>;
  distanceToFlag_not_in?: Maybe<Float[] | Float>;
  distanceToFlag_lt?: Maybe<Float>;
  distanceToFlag_lte?: Maybe<Float>;
  distanceToFlag_gt?: Maybe<Float>;
  distanceToFlag_gte?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  blueTee_not?: Maybe<Int>;
  blueTee_in?: Maybe<Int[] | Int>;
  blueTee_not_in?: Maybe<Int[] | Int>;
  blueTee_lt?: Maybe<Int>;
  blueTee_lte?: Maybe<Int>;
  blueTee_gt?: Maybe<Int>;
  blueTee_gte?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  whiteTee_not?: Maybe<Int>;
  whiteTee_in?: Maybe<Int[] | Int>;
  whiteTee_not_in?: Maybe<Int[] | Int>;
  whiteTee_lt?: Maybe<Int>;
  whiteTee_lte?: Maybe<Int>;
  whiteTee_gt?: Maybe<Int>;
  whiteTee_gte?: Maybe<Int>;
  redTee?: Maybe<Int>;
  redTee_not?: Maybe<Int>;
  redTee_in?: Maybe<Int[] | Int>;
  redTee_not_in?: Maybe<Int[] | Int>;
  redTee_lt?: Maybe<Int>;
  redTee_lte?: Maybe<Int>;
  redTee_gt?: Maybe<Int>;
  redTee_gte?: Maybe<Int>;
  AND?: Maybe<HoleWhereInput[] | HoleWhereInput>;
  OR?: Maybe<HoleWhereInput[] | HoleWhereInput>;
  NOT?: Maybe<HoleWhereInput[] | HoleWhereInput>;
}

export interface ScorecardCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  golfers?: Maybe<GolferCreateManyWithoutScoreCardInput>;
  course: CourseCreateOneWithoutScoreCardInput;
  strokes?: Maybe<StrokeCreateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface HoleUpsertWithWhereUniqueWithoutCourseInput {
  where: HoleWhereUniqueInput;
  update: HoleUpdateWithoutCourseDataInput;
  create: HoleCreateWithoutCourseInput;
}

export interface GolferCreateWithoutScoreCardInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface HoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  holeNum?: Maybe<Int>;
  holeNum_not?: Maybe<Int>;
  holeNum_in?: Maybe<Int[] | Int>;
  holeNum_not_in?: Maybe<Int[] | Int>;
  holeNum_lt?: Maybe<Int>;
  holeNum_lte?: Maybe<Int>;
  holeNum_gt?: Maybe<Int>;
  holeNum_gte?: Maybe<Int>;
  handicap?: Maybe<Int>;
  handicap_not?: Maybe<Int>;
  handicap_in?: Maybe<Int[] | Int>;
  handicap_not_in?: Maybe<Int[] | Int>;
  handicap_lt?: Maybe<Int>;
  handicap_lte?: Maybe<Int>;
  handicap_gt?: Maybe<Int>;
  handicap_gte?: Maybe<Int>;
  par?: Maybe<Int>;
  par_not?: Maybe<Int>;
  par_in?: Maybe<Int[] | Int>;
  par_not_in?: Maybe<Int[] | Int>;
  par_lt?: Maybe<Int>;
  par_lte?: Maybe<Int>;
  par_gt?: Maybe<Int>;
  par_gte?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  distanceToFlag_not?: Maybe<Float>;
  distanceToFlag_in?: Maybe<Float[] | Float>;
  distanceToFlag_not_in?: Maybe<Float[] | Float>;
  distanceToFlag_lt?: Maybe<Float>;
  distanceToFlag_lte?: Maybe<Float>;
  distanceToFlag_gt?: Maybe<Float>;
  distanceToFlag_gte?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  blueTee_not?: Maybe<Int>;
  blueTee_in?: Maybe<Int[] | Int>;
  blueTee_not_in?: Maybe<Int[] | Int>;
  blueTee_lt?: Maybe<Int>;
  blueTee_lte?: Maybe<Int>;
  blueTee_gt?: Maybe<Int>;
  blueTee_gte?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  whiteTee_not?: Maybe<Int>;
  whiteTee_in?: Maybe<Int[] | Int>;
  whiteTee_not_in?: Maybe<Int[] | Int>;
  whiteTee_lt?: Maybe<Int>;
  whiteTee_lte?: Maybe<Int>;
  whiteTee_gt?: Maybe<Int>;
  whiteTee_gte?: Maybe<Int>;
  redTee?: Maybe<Int>;
  redTee_not?: Maybe<Int>;
  redTee_in?: Maybe<Int[] | Int>;
  redTee_not_in?: Maybe<Int[] | Int>;
  redTee_lt?: Maybe<Int>;
  redTee_lte?: Maybe<Int>;
  redTee_gt?: Maybe<Int>;
  redTee_gte?: Maybe<Int>;
  AND?: Maybe<HoleScalarWhereInput[] | HoleScalarWhereInput>;
  OR?: Maybe<HoleScalarWhereInput[] | HoleScalarWhereInput>;
  NOT?: Maybe<HoleScalarWhereInput[] | HoleScalarWhereInput>;
}

export interface CourseCreateWithoutScoreCardInput {
  id?: Maybe<ID_Input>;
  courseName: String;
  courseAddress: String;
  coursePhone: String;
  long: Float;
  lat: Float;
  numberOfHoles: Int;
  holes?: Maybe<HoleCreateManyWithoutCourseInput>;
}

export interface HoleUpdateManyWithWhereNestedInput {
  where: HoleScalarWhereInput;
  data: HoleUpdateManyDataInput;
}

export interface HoleCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  holeNum: Int;
  handicap: Int;
  par: Int;
  distanceToFlag: Float;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface HoleUpdateManyDataInput {
  holeNum?: Maybe<Int>;
  handicap?: Maybe<Int>;
  par?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface StrokeCreateWithoutScoreCardInput {
  id?: Maybe<ID_Input>;
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  hole: HoleCreateOneInput;
  strokes: Int;
}

export interface CourseUpsertWithoutScoreCardInput {
  update: CourseUpdateWithoutScoreCardDataInput;
  create: CourseCreateWithoutScoreCardInput;
}

export interface HoleCreateInput {
  id?: Maybe<ID_Input>;
  course: CourseCreateOneWithoutHolesInput;
  holeNum: Int;
  handicap: Int;
  par: Int;
  distanceToFlag: Float;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface StrokeUpdateManyWithoutScoreCardInput {
  create?: Maybe<
    StrokeCreateWithoutScoreCardInput[] | StrokeCreateWithoutScoreCardInput
  >;
  delete?: Maybe<StrokeWhereUniqueInput[] | StrokeWhereUniqueInput>;
  connect?: Maybe<StrokeWhereUniqueInput[] | StrokeWhereUniqueInput>;
  set?: Maybe<StrokeWhereUniqueInput[] | StrokeWhereUniqueInput>;
  disconnect?: Maybe<StrokeWhereUniqueInput[] | StrokeWhereUniqueInput>;
  update?: Maybe<
    | StrokeUpdateWithWhereUniqueWithoutScoreCardInput[]
    | StrokeUpdateWithWhereUniqueWithoutScoreCardInput
  >;
  upsert?: Maybe<
    | StrokeUpsertWithWhereUniqueWithoutScoreCardInput[]
    | StrokeUpsertWithWhereUniqueWithoutScoreCardInput
  >;
  deleteMany?: Maybe<StrokeScalarWhereInput[] | StrokeScalarWhereInput>;
  updateMany?: Maybe<
    | StrokeUpdateManyWithWhereNestedInput[]
    | StrokeUpdateManyWithWhereNestedInput
  >;
}

export interface GolferWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  scoreCard?: Maybe<ScorecardWhereInput>;
  AND?: Maybe<GolferWhereInput[] | GolferWhereInput>;
  OR?: Maybe<GolferWhereInput[] | GolferWhereInput>;
  NOT?: Maybe<GolferWhereInput[] | GolferWhereInput>;
}

export interface StrokeUpdateWithWhereUniqueWithoutScoreCardInput {
  where: StrokeWhereUniqueInput;
  data: StrokeUpdateWithoutScoreCardDataInput;
}

export interface HoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HoleWhereInput>;
  AND?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
  OR?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
  NOT?: Maybe<HoleSubscriptionWhereInput[] | HoleSubscriptionWhereInput>;
}

export interface StrokeUpdateWithoutScoreCardDataInput {
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  hole?: Maybe<HoleUpdateOneRequiredInput>;
  strokes?: Maybe<Int>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface HoleUpdateOneRequiredInput {
  create?: Maybe<HoleCreateInput>;
  update?: Maybe<HoleUpdateDataInput>;
  upsert?: Maybe<HoleUpsertNestedInput>;
  connect?: Maybe<HoleWhereUniqueInput>;
}

export interface ScorecardUpdateWithoutStrokesDataInput {
  profile?: Maybe<ProfileUpdateOneRequiredWithoutScoreCardsInput>;
  golfers?: Maybe<GolferUpdateManyWithoutScoreCardInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface HoleUpdateDataInput {
  course?: Maybe<CourseUpdateOneRequiredWithoutHolesInput>;
  holeNum?: Maybe<Int>;
  handicap?: Maybe<Int>;
  par?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface ScorecardCreateWithoutStrokesInput {
  id?: Maybe<ID_Input>;
  profile: ProfileCreateOneWithoutScoreCardsInput;
  golfers?: Maybe<GolferCreateManyWithoutScoreCardInput>;
  course: CourseCreateOneWithoutScoreCardInput;
  isActive?: Maybe<Boolean>;
}

export interface CourseUpdateOneRequiredWithoutHolesInput {
  create?: Maybe<CourseCreateWithoutHolesInput>;
  update?: Maybe<CourseUpdateWithoutHolesDataInput>;
  upsert?: Maybe<CourseUpsertWithoutHolesInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface ScorecardUpdateManyMutationInput {
  isActive?: Maybe<Boolean>;
}

export interface CourseUpdateWithoutHolesDataInput {
  scoreCard?: Maybe<ScorecardUpdateOneRequiredWithoutCourseInput>;
  courseName?: Maybe<String>;
  courseAddress?: Maybe<String>;
  coursePhone?: Maybe<String>;
  long?: Maybe<Float>;
  lat?: Maybe<Float>;
  numberOfHoles?: Maybe<Int>;
}

export interface ProfileUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
}

export interface ScorecardUpdateOneRequiredWithoutCourseInput {
  create?: Maybe<ScorecardCreateWithoutCourseInput>;
  update?: Maybe<ScorecardUpdateWithoutCourseDataInput>;
  upsert?: Maybe<ScorecardUpsertWithoutCourseInput>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface HoleUpdateManyMutationInput {
  holeNum?: Maybe<Int>;
  handicap?: Maybe<Int>;
  par?: Maybe<Int>;
  distanceToFlag?: Maybe<Float>;
  blueTee?: Maybe<Int>;
  whiteTee?: Maybe<Int>;
  redTee?: Maybe<Int>;
}

export interface ScorecardUpdateWithoutCourseDataInput {
  profile?: Maybe<ProfileUpdateOneRequiredWithoutScoreCardsInput>;
  golfers?: Maybe<GolferUpdateManyWithoutScoreCardInput>;
  strokes?: Maybe<StrokeUpdateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export type ScorecardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileUpdateOneRequiredWithoutScoreCardsInput {
  create?: Maybe<ProfileCreateWithoutScoreCardsInput>;
  update?: Maybe<ProfileUpdateWithoutScoreCardsDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutScoreCardsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export type StrokeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileUpdateWithoutScoreCardsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  account?: Maybe<AccountUpdateOneRequiredWithoutProfileInput>;
}

export interface ScorecardCreateManyWithoutProfileInput {
  create?: Maybe<
    ScorecardCreateWithoutProfileInput[] | ScorecardCreateWithoutProfileInput
  >;
  connect?: Maybe<ScorecardWhereUniqueInput[] | ScorecardWhereUniqueInput>;
}

export interface AccountUpdateOneRequiredWithoutProfileInput {
  create?: Maybe<AccountCreateWithoutProfileInput>;
  update?: Maybe<AccountUpdateWithoutProfileDataInput>;
  upsert?: Maybe<AccountUpsertWithoutProfileInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface CourseCreateOneWithoutScoreCardInput {
  create?: Maybe<CourseCreateWithoutScoreCardInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface AccountUpdateWithoutProfileDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface StrokeCreateManyWithoutScoreCardInput {
  create?: Maybe<
    StrokeCreateWithoutScoreCardInput[] | StrokeCreateWithoutScoreCardInput
  >;
  connect?: Maybe<StrokeWhereUniqueInput[] | StrokeWhereUniqueInput>;
}

export interface AccountUpsertWithoutProfileInput {
  update: AccountUpdateWithoutProfileDataInput;
  create: AccountCreateWithoutProfileInput;
}

export interface StrokeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  golferId?: Maybe<ID_Input>;
  golferId_not?: Maybe<ID_Input>;
  golferId_in?: Maybe<ID_Input[] | ID_Input>;
  golferId_not_in?: Maybe<ID_Input[] | ID_Input>;
  golferId_lt?: Maybe<ID_Input>;
  golferId_lte?: Maybe<ID_Input>;
  golferId_gt?: Maybe<ID_Input>;
  golferId_gte?: Maybe<ID_Input>;
  golferId_contains?: Maybe<ID_Input>;
  golferId_not_contains?: Maybe<ID_Input>;
  golferId_starts_with?: Maybe<ID_Input>;
  golferId_not_starts_with?: Maybe<ID_Input>;
  golferId_ends_with?: Maybe<ID_Input>;
  golferId_not_ends_with?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  profileId_not?: Maybe<ID_Input>;
  profileId_in?: Maybe<ID_Input[] | ID_Input>;
  profileId_not_in?: Maybe<ID_Input[] | ID_Input>;
  profileId_lt?: Maybe<ID_Input>;
  profileId_lte?: Maybe<ID_Input>;
  profileId_gt?: Maybe<ID_Input>;
  profileId_gte?: Maybe<ID_Input>;
  profileId_contains?: Maybe<ID_Input>;
  profileId_not_contains?: Maybe<ID_Input>;
  profileId_starts_with?: Maybe<ID_Input>;
  profileId_not_starts_with?: Maybe<ID_Input>;
  profileId_ends_with?: Maybe<ID_Input>;
  profileId_not_ends_with?: Maybe<ID_Input>;
  hole?: Maybe<HoleWhereInput>;
  scoreCard?: Maybe<ScorecardWhereInput>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  AND?: Maybe<StrokeWhereInput[] | StrokeWhereInput>;
  OR?: Maybe<StrokeWhereInput[] | StrokeWhereInput>;
  NOT?: Maybe<StrokeWhereInput[] | StrokeWhereInput>;
}

export interface ProfileUpsertWithoutScoreCardsInput {
  update: ProfileUpdateWithoutScoreCardsDataInput;
  create: ProfileCreateWithoutScoreCardsInput;
}

export interface GolferSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GolferWhereInput>;
  AND?: Maybe<GolferSubscriptionWhereInput[] | GolferSubscriptionWhereInput>;
  OR?: Maybe<GolferSubscriptionWhereInput[] | GolferSubscriptionWhereInput>;
  NOT?: Maybe<GolferSubscriptionWhereInput[] | GolferSubscriptionWhereInput>;
}

export interface ScorecardUpsertWithoutCourseInput {
  update: ScorecardUpdateWithoutCourseDataInput;
  create: ScorecardCreateWithoutCourseInput;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CourseUpsertWithoutHolesInput {
  update: CourseUpdateWithoutHolesDataInput;
  create: CourseCreateWithoutHolesInput;
}

export interface ScorecardCreateInput {
  id?: Maybe<ID_Input>;
  profile: ProfileCreateOneWithoutScoreCardsInput;
  golfers?: Maybe<GolferCreateManyWithoutScoreCardInput>;
  course: CourseCreateOneWithoutScoreCardInput;
  strokes?: Maybe<StrokeCreateManyWithoutScoreCardInput>;
  isActive?: Maybe<Boolean>;
}

export interface HoleUpsertNestedInput {
  update: HoleUpdateDataInput;
  create: HoleCreateInput;
}

export interface GolferUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StrokeUpsertWithWhereUniqueWithoutScoreCardInput {
  where: StrokeWhereUniqueInput;
  update: StrokeUpdateWithoutScoreCardDataInput;
  create: StrokeCreateWithoutScoreCardInput;
}

export interface ScorecardCreateOneWithoutGolfersInput {
  create?: Maybe<ScorecardCreateWithoutGolfersInput>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface StrokeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  golferId?: Maybe<ID_Input>;
  golferId_not?: Maybe<ID_Input>;
  golferId_in?: Maybe<ID_Input[] | ID_Input>;
  golferId_not_in?: Maybe<ID_Input[] | ID_Input>;
  golferId_lt?: Maybe<ID_Input>;
  golferId_lte?: Maybe<ID_Input>;
  golferId_gt?: Maybe<ID_Input>;
  golferId_gte?: Maybe<ID_Input>;
  golferId_contains?: Maybe<ID_Input>;
  golferId_not_contains?: Maybe<ID_Input>;
  golferId_starts_with?: Maybe<ID_Input>;
  golferId_not_starts_with?: Maybe<ID_Input>;
  golferId_ends_with?: Maybe<ID_Input>;
  golferId_not_ends_with?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  profileId_not?: Maybe<ID_Input>;
  profileId_in?: Maybe<ID_Input[] | ID_Input>;
  profileId_not_in?: Maybe<ID_Input[] | ID_Input>;
  profileId_lt?: Maybe<ID_Input>;
  profileId_lte?: Maybe<ID_Input>;
  profileId_gt?: Maybe<ID_Input>;
  profileId_gte?: Maybe<ID_Input>;
  profileId_contains?: Maybe<ID_Input>;
  profileId_not_contains?: Maybe<ID_Input>;
  profileId_starts_with?: Maybe<ID_Input>;
  profileId_not_starts_with?: Maybe<ID_Input>;
  profileId_ends_with?: Maybe<ID_Input>;
  profileId_not_ends_with?: Maybe<ID_Input>;
  strokes?: Maybe<Int>;
  strokes_not?: Maybe<Int>;
  strokes_in?: Maybe<Int[] | Int>;
  strokes_not_in?: Maybe<Int[] | Int>;
  strokes_lt?: Maybe<Int>;
  strokes_lte?: Maybe<Int>;
  strokes_gt?: Maybe<Int>;
  strokes_gte?: Maybe<Int>;
  AND?: Maybe<StrokeScalarWhereInput[] | StrokeScalarWhereInput>;
  OR?: Maybe<StrokeScalarWhereInput[] | StrokeScalarWhereInput>;
  NOT?: Maybe<StrokeScalarWhereInput[] | StrokeScalarWhereInput>;
}

export interface GolferCreateManyWithoutScoreCardInput {
  create?: Maybe<
    GolferCreateWithoutScoreCardInput[] | GolferCreateWithoutScoreCardInput
  >;
  connect?: Maybe<GolferWhereUniqueInput[] | GolferWhereUniqueInput>;
}

export interface StrokeUpdateManyWithWhereNestedInput {
  where: StrokeScalarWhereInput;
  data: StrokeUpdateManyDataInput;
}

export interface HoleCreateOneInput {
  create?: Maybe<HoleCreateInput>;
  connect?: Maybe<HoleWhereUniqueInput>;
}

export interface StrokeUpdateManyDataInput {
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  strokes?: Maybe<Int>;
}

export interface StrokeUpdateManyMutationInput {
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  strokes?: Maybe<Int>;
}

export interface ScorecardUpsertWithWhereUniqueWithoutProfileInput {
  where: ScorecardWhereUniqueInput;
  update: ScorecardUpdateWithoutProfileDataInput;
  create: ScorecardCreateWithoutProfileInput;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  fullName: String;
  account: AccountCreateOneWithoutProfileInput;
  scoreCards?: Maybe<ScorecardCreateManyWithoutProfileInput>;
}

export interface ScorecardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isActive?: Maybe<Boolean>;
  isActive_not?: Maybe<Boolean>;
  AND?: Maybe<ScorecardScalarWhereInput[] | ScorecardScalarWhereInput>;
  OR?: Maybe<ScorecardScalarWhereInput[] | ScorecardScalarWhereInput>;
  NOT?: Maybe<ScorecardScalarWhereInput[] | ScorecardScalarWhereInput>;
}

export interface ProfileCreateOneWithoutAccountInput {
  create?: Maybe<ProfileCreateWithoutAccountInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface AccountUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface ProfileUpsertWithoutAccountInput {
  update: ProfileUpdateWithoutAccountDataInput;
  create: ProfileCreateWithoutAccountInput;
}

export interface ScorecardUpdateManyDataInput {
  isActive?: Maybe<Boolean>;
}

export interface ScorecardUpdateManyWithWhereNestedInput {
  where: ScorecardScalarWhereInput;
  data: ScorecardUpdateManyDataInput;
}

export interface HoleCreateManyWithoutCourseInput {
  create?: Maybe<HoleCreateWithoutCourseInput[] | HoleCreateWithoutCourseInput>;
  connect?: Maybe<HoleWhereUniqueInput[] | HoleWhereUniqueInput>;
}

export interface ScorecardUpdateOneWithoutGolfersInput {
  create?: Maybe<ScorecardCreateWithoutGolfersInput>;
  update?: Maybe<ScorecardUpdateWithoutGolfersDataInput>;
  upsert?: Maybe<ScorecardUpsertWithoutGolfersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ScorecardWhereUniqueInput>;
}

export interface StrokeCreateInput {
  id?: Maybe<ID_Input>;
  golferId?: Maybe<ID_Input>;
  profileId?: Maybe<ID_Input>;
  hole: HoleCreateOneInput;
  scoreCard?: Maybe<ScorecardCreateOneWithoutStrokesInput>;
  strokes: Int;
}

export interface AccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profile?: Maybe<ProfileWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface StrokePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  golferId?: ID_Output;
  profileId?: ID_Output;
  strokes: Int;
}

export interface StrokePreviousValuesPromise
  extends Promise<StrokePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  golferId: () => Promise<ID_Output>;
  profileId: () => Promise<ID_Output>;
  strokes: () => Promise<Int>;
}

export interface StrokePreviousValuesSubscription
  extends Promise<AsyncIterator<StrokePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  golferId: () => Promise<AsyncIterator<ID_Output>>;
  profileId: () => Promise<AsyncIterator<ID_Output>>;
  strokes: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName: String;
  lastName: String;
  fullName: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
}

export interface ScorecardSubscriptionPayload {
  mutation: MutationType;
  node: Scorecard;
  updatedFields: String[];
  previousValues: ScorecardPreviousValues;
}

export interface ScorecardSubscriptionPayloadPromise
  extends Promise<ScorecardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScorecardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScorecardPreviousValuesPromise>() => T;
}

export interface ScorecardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScorecardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScorecardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScorecardPreviousValuesSubscription>() => T;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScorecardPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isActive?: Boolean;
}

export interface ScorecardPreviousValuesPromise
  extends Promise<ScorecardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isActive: () => Promise<Boolean>;
}

export interface ScorecardPreviousValuesSubscription
  extends Promise<AsyncIterator<ScorecardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StrokeEdge {
  node: Stroke;
  cursor: String;
}

export interface StrokeEdgePromise extends Promise<StrokeEdge>, Fragmentable {
  node: <T = StrokePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StrokeEdgeSubscription
  extends Promise<AsyncIterator<StrokeEdge>>,
    Fragmentable {
  node: <T = StrokeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScorecard {
  count: Int;
}

export interface AggregateScorecardPromise
  extends Promise<AggregateScorecard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScorecardSubscription
  extends Promise<AsyncIterator<AggregateScorecard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface ScorecardConnection {
  pageInfo: PageInfo;
  edges: ScorecardEdge[];
}

export interface ScorecardConnectionPromise
  extends Promise<ScorecardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScorecardEdge>>() => T;
  aggregate: <T = AggregateScorecardPromise>() => T;
}

export interface ScorecardConnectionSubscription
  extends Promise<AsyncIterator<ScorecardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScorecardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScorecardSubscription>() => T;
}

export interface Profile {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName: String;
  lastName: String;
  fullName: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
  account: <T = AccountPromise>() => T;
  scoreCards: <T = FragmentableArray<Scorecard>>(args?: {
    where?: ScorecardWhereInput;
    orderBy?: ScorecardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  account: <T = AccountSubscription>() => T;
  scoreCards: <T = Promise<AsyncIterator<ScorecardSubscription>>>(args?: {
    where?: ScorecardWhereInput;
    orderBy?: ScorecardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
  account: <T = AccountPromise>() => T;
  scoreCards: <T = FragmentableArray<Scorecard>>(args?: {
    where?: ScorecardWhereInput;
    orderBy?: ScorecardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Scorecard {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isActive?: Boolean;
}

export interface ScorecardPromise extends Promise<Scorecard>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  golfers: <T = FragmentableArray<Golfer>>(args?: {
    where?: GolferWhereInput;
    orderBy?: GolferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CoursePromise>() => T;
  strokes: <T = FragmentableArray<Stroke>>(args?: {
    where?: StrokeWhereInput;
    orderBy?: StrokeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isActive: () => Promise<Boolean>;
}

export interface ScorecardSubscription
  extends Promise<AsyncIterator<Scorecard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  profile: <T = ProfileSubscription>() => T;
  golfers: <T = Promise<AsyncIterator<GolferSubscription>>>(args?: {
    where?: GolferWhereInput;
    orderBy?: GolferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CourseSubscription>() => T;
  strokes: <T = Promise<AsyncIterator<StrokeSubscription>>>(args?: {
    where?: StrokeWhereInput;
    orderBy?: StrokeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface ScorecardNullablePromise
  extends Promise<Scorecard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  golfers: <T = FragmentableArray<Golfer>>(args?: {
    where?: GolferWhereInput;
    orderBy?: GolferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CoursePromise>() => T;
  strokes: <T = FragmentableArray<Stroke>>(args?: {
    where?: StrokeWhereInput;
    orderBy?: StrokeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isActive: () => Promise<Boolean>;
}

export interface Account {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  role: Role;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profile: <T = ProfilePromise>() => T;
  role: () => Promise<Role>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profile: <T = ProfileSubscription>() => T;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profile: <T = ProfilePromise>() => T;
  role: () => Promise<Role>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface HoleEdge {
  node: Hole;
  cursor: String;
}

export interface HoleEdgePromise extends Promise<HoleEdge>, Fragmentable {
  node: <T = HolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HoleEdgeSubscription
  extends Promise<AsyncIterator<HoleEdge>>,
    Fragmentable {
  node: <T = HoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  role: Role;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AggregateGolfer {
  count: Int;
}

export interface AggregateGolferPromise
  extends Promise<AggregateGolfer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGolferSubscription
  extends Promise<AsyncIterator<AggregateGolfer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Stroke {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  golferId?: ID_Output;
  profileId?: ID_Output;
  strokes: Int;
}

export interface StrokePromise extends Promise<Stroke>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  golferId: () => Promise<ID_Output>;
  profileId: () => Promise<ID_Output>;
  hole: <T = HolePromise>() => T;
  scoreCard: <T = ScorecardPromise>() => T;
  strokes: () => Promise<Int>;
}

export interface StrokeSubscription
  extends Promise<AsyncIterator<Stroke>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  golferId: () => Promise<AsyncIterator<ID_Output>>;
  profileId: () => Promise<AsyncIterator<ID_Output>>;
  hole: <T = HoleSubscription>() => T;
  scoreCard: <T = ScorecardSubscription>() => T;
  strokes: () => Promise<AsyncIterator<Int>>;
}

export interface StrokeNullablePromise
  extends Promise<Stroke | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  golferId: () => Promise<ID_Output>;
  profileId: () => Promise<ID_Output>;
  hole: <T = HolePromise>() => T;
  scoreCard: <T = ScorecardPromise>() => T;
  strokes: () => Promise<Int>;
}

export interface GolferConnection {
  pageInfo: PageInfo;
  edges: GolferEdge[];
}

export interface GolferConnectionPromise
  extends Promise<GolferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GolferEdge>>() => T;
  aggregate: <T = AggregateGolferPromise>() => T;
}

export interface GolferConnectionSubscription
  extends Promise<AsyncIterator<GolferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GolferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGolferSubscription>() => T;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  courseName: String;
  courseAddress: String;
  coursePhone: String;
  long: Float;
  lat: Float;
  numberOfHoles: Int;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  courseName: () => Promise<String>;
  courseAddress: () => Promise<String>;
  coursePhone: () => Promise<String>;
  long: () => Promise<Float>;
  lat: () => Promise<Float>;
  numberOfHoles: () => Promise<Int>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  courseName: () => Promise<AsyncIterator<String>>;
  courseAddress: () => Promise<AsyncIterator<String>>;
  coursePhone: () => Promise<AsyncIterator<String>>;
  long: () => Promise<AsyncIterator<Float>>;
  lat: () => Promise<AsyncIterator<Float>>;
  numberOfHoles: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateStroke {
  count: Int;
}

export interface AggregateStrokePromise
  extends Promise<AggregateStroke>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStrokeSubscription
  extends Promise<AsyncIterator<AggregateStroke>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Hole {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  holeNum: Int;
  handicap: Int;
  par: Int;
  distanceToFlag: Float;
  blueTee?: Int;
  whiteTee?: Int;
  redTee?: Int;
}

export interface HolePromise extends Promise<Hole>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  course: <T = CoursePromise>() => T;
  holeNum: () => Promise<Int>;
  handicap: () => Promise<Int>;
  par: () => Promise<Int>;
  distanceToFlag: () => Promise<Float>;
  blueTee: () => Promise<Int>;
  whiteTee: () => Promise<Int>;
  redTee: () => Promise<Int>;
}

export interface HoleSubscription
  extends Promise<AsyncIterator<Hole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  course: <T = CourseSubscription>() => T;
  holeNum: () => Promise<AsyncIterator<Int>>;
  handicap: () => Promise<AsyncIterator<Int>>;
  par: () => Promise<AsyncIterator<Int>>;
  distanceToFlag: () => Promise<AsyncIterator<Float>>;
  blueTee: () => Promise<AsyncIterator<Int>>;
  whiteTee: () => Promise<AsyncIterator<Int>>;
  redTee: () => Promise<AsyncIterator<Int>>;
}

export interface HoleNullablePromise
  extends Promise<Hole | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  course: <T = CoursePromise>() => T;
  holeNum: () => Promise<Int>;
  handicap: () => Promise<Int>;
  par: () => Promise<Int>;
  distanceToFlag: () => Promise<Float>;
  blueTee: () => Promise<Int>;
  whiteTee: () => Promise<Int>;
  redTee: () => Promise<Int>;
}

export interface ScorecardEdge {
  node: Scorecard;
  cursor: String;
}

export interface ScorecardEdgePromise
  extends Promise<ScorecardEdge>,
    Fragmentable {
  node: <T = ScorecardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScorecardEdgeSubscription
  extends Promise<AsyncIterator<ScorecardEdge>>,
    Fragmentable {
  node: <T = ScorecardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GolferSubscriptionPayload {
  mutation: MutationType;
  node: Golfer;
  updatedFields: String[];
  previousValues: GolferPreviousValues;
}

export interface GolferSubscriptionPayloadPromise
  extends Promise<GolferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GolferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GolferPreviousValuesPromise>() => T;
}

export interface GolferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GolferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GolferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GolferPreviousValuesSubscription>() => T;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface GolferPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface GolferPreviousValuesPromise
  extends Promise<GolferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface GolferPreviousValuesSubscription
  extends Promise<AsyncIterator<GolferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface HoleConnection {
  pageInfo: PageInfo;
  edges: HoleEdge[];
}

export interface HoleConnectionPromise
  extends Promise<HoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HoleEdge>>() => T;
  aggregate: <T = AggregateHolePromise>() => T;
}

export interface HoleConnectionSubscription
  extends Promise<AsyncIterator<HoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHoleSubscription>() => T;
}

export interface Course {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  courseName: String;
  courseAddress: String;
  coursePhone: String;
  long: Float;
  lat: Float;
  numberOfHoles: Int;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  scoreCard: <T = ScorecardPromise>() => T;
  courseName: () => Promise<String>;
  courseAddress: () => Promise<String>;
  coursePhone: () => Promise<String>;
  long: () => Promise<Float>;
  lat: () => Promise<Float>;
  numberOfHoles: () => Promise<Int>;
  holes: <T = FragmentableArray<Hole>>(args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  scoreCard: <T = ScorecardSubscription>() => T;
  courseName: () => Promise<AsyncIterator<String>>;
  courseAddress: () => Promise<AsyncIterator<String>>;
  coursePhone: () => Promise<AsyncIterator<String>>;
  long: () => Promise<AsyncIterator<Float>>;
  lat: () => Promise<AsyncIterator<Float>>;
  numberOfHoles: () => Promise<AsyncIterator<Int>>;
  holes: <T = Promise<AsyncIterator<HoleSubscription>>>(args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  scoreCard: <T = ScorecardPromise>() => T;
  courseName: () => Promise<String>;
  courseAddress: () => Promise<String>;
  coursePhone: () => Promise<String>;
  long: () => Promise<Float>;
  lat: () => Promise<Float>;
  numberOfHoles: () => Promise<Int>;
  holes: <T = FragmentableArray<Hole>>(args?: {
    where?: HoleWhereInput;
    orderBy?: HoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StrokeConnection {
  pageInfo: PageInfo;
  edges: StrokeEdge[];
}

export interface StrokeConnectionPromise
  extends Promise<StrokeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StrokeEdge>>() => T;
  aggregate: <T = AggregateStrokePromise>() => T;
}

export interface StrokeConnectionSubscription
  extends Promise<AsyncIterator<StrokeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StrokeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStrokeSubscription>() => T;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface Golfer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface GolferPromise extends Promise<Golfer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  scoreCard: <T = ScorecardPromise>() => T;
}

export interface GolferSubscription
  extends Promise<AsyncIterator<Golfer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  scoreCard: <T = ScorecardSubscription>() => T;
}

export interface GolferNullablePromise
  extends Promise<Golfer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  scoreCard: <T = ScorecardPromise>() => T;
}

export interface HolePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  holeNum: Int;
  handicap: Int;
  par: Int;
  distanceToFlag: Float;
  blueTee?: Int;
  whiteTee?: Int;
  redTee?: Int;
}

export interface HolePreviousValuesPromise
  extends Promise<HolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  holeNum: () => Promise<Int>;
  handicap: () => Promise<Int>;
  par: () => Promise<Int>;
  distanceToFlag: () => Promise<Float>;
  blueTee: () => Promise<Int>;
  whiteTee: () => Promise<Int>;
  redTee: () => Promise<Int>;
}

export interface HolePreviousValuesSubscription
  extends Promise<AsyncIterator<HolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  holeNum: () => Promise<AsyncIterator<Int>>;
  handicap: () => Promise<AsyncIterator<Int>>;
  par: () => Promise<AsyncIterator<Int>>;
  distanceToFlag: () => Promise<AsyncIterator<Float>>;
  blueTee: () => Promise<AsyncIterator<Int>>;
  whiteTee: () => Promise<AsyncIterator<Int>>;
  redTee: () => Promise<AsyncIterator<Int>>;
}

export interface HoleSubscriptionPayload {
  mutation: MutationType;
  node: Hole;
  updatedFields: String[];
  previousValues: HolePreviousValues;
}

export interface HoleSubscriptionPayloadPromise
  extends Promise<HoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HolePreviousValuesPromise>() => T;
}

export interface HoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HolePreviousValuesSubscription>() => T;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StrokeSubscriptionPayload {
  mutation: MutationType;
  node: Stroke;
  updatedFields: String[];
  previousValues: StrokePreviousValues;
}

export interface StrokeSubscriptionPayloadPromise
  extends Promise<StrokeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StrokePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StrokePreviousValuesPromise>() => T;
}

export interface StrokeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StrokeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StrokeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StrokePreviousValuesSubscription>() => T;
}

export interface GolferEdge {
  node: Golfer;
  cursor: String;
}

export interface GolferEdgePromise extends Promise<GolferEdge>, Fragmentable {
  node: <T = GolferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GolferEdgeSubscription
  extends Promise<AsyncIterator<GolferEdge>>,
    Fragmentable {
  node: <T = GolferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHole {
  count: Int;
}

export interface AggregateHolePromise
  extends Promise<AggregateHole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHoleSubscription
  extends Promise<AsyncIterator<AggregateHole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Hole",
    embedded: false
  },
  {
    name: "Scorecard",
    embedded: false
  },
  {
    name: "Stroke",
    embedded: false
  },
  {
    name: "Golfer",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4333`
});
export const prisma = new Prisma();
